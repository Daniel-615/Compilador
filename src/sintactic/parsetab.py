
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BALLACK CHAR_LITERAL COLON COMMA COUTINHO CRISTIANO DOT EQUALS FORLAN GLOBAL GT IDENTIFIER INIESTA LBRACE LOCAL LPAREN LT MESSI MILITO NUMBER PEPE QUOTE RBRACE RELOP ROBBEN RONALDINHO RPAREN SAVIOLA SEMICOLON SON STRING_LITERAL TCHOUAMENI VALDERRAMA WALKER ZIDANEprogram : statement\n                | program statementstatement : declaration\n                     | assignment\n                     | while_loop\n                     | if_statement\n                     | method_declaration\n                     | method_call SEMICOLON\n                     | expression SEMICOLONdeclaration : MILITO IDENTIFIER SEMICOLON\n                       | MILITO IDENTIFIER EQUALS expression SEMICOLON\n                       | ZIDANE IDENTIFIER SEMICOLON\n                       | ZIDANE IDENTIFIER EQUALS expression SEMICOLON\n                       | SAVIOLA IDENTIFIER SEMICOLON\n                       | SAVIOLA IDENTIFIER EQUALS expression SEMICOLON\n                       | INIESTA IDENTIFIER SEMICOLON\n                       | INIESTA IDENTIFIER EQUALS expression SEMICOLON\n                       | VALDERRAMA IDENTIFIER SEMICOLON\n                       | VALDERRAMA IDENTIFIER EQUALS expression SEMICOLONfactor : LPAREN expression RPARENassignment : IDENTIFIER EQUALS expression SEMICOLONexpression : expression CRISTIANO term\n                      | expression TCHOUAMENI term\n                      | termterm : term MESSI factor\n                | term PEPE factor\n                | factorfactor : NUMBER\n                  | IDENTIFIER\n                  | STRING_LITERAL\n                  | CHAR_LITERAL\n                  | method_callif_statement : BALLACK LPAREN condition RPAREN LBRACE program RBRACE\n                        | BALLACK LPAREN condition RPAREN LBRACE program RBRACE ROBBEN LBRACE program RBRACEcondition : IDENTIFIER RELOP expressionwhile_loop : WALKER LPAREN condition RPAREN LBRACE program RBRACEmethod_declaration : IDENTIFIER LPAREN RPAREN LBRACE program RBRACEmethod_call : IDENTIFIER LPAREN RPARENstatement : FORLAN LPAREN IDENTIFIER RPAREN LBRACE cases default_case RBRACEempty :cases : cases case\n                | casecase : SON value COLON programdefault_case : RONALDINHO COLON program\n                        | emptyvalue : NUMBER\n                | STRING_LITERAL\n                | CHAR_LITERALstatement : COUTINHO LPAREN expression RPAREN SEMICOLON'
    
_lr_action_items = {'FORLAN':([0,1,2,3,4,5,6,7,26,27,28,55,57,59,61,63,72,73,84,85,86,87,88,89,90,91,93,97,98,99,108,109,110,111,112,114,115,116,117,118,],[10,10,-1,-3,-4,-5,-6,-7,-2,-8,-9,-10,-12,-14,-16,-18,-21,10,10,-49,-11,-13,-15,-17,-19,10,10,-37,10,10,-36,-33,-39,10,10,10,10,10,10,-34,]),'COUTINHO':([0,1,2,3,4,5,6,7,26,27,28,55,57,59,61,63,72,73,84,85,86,87,88,89,90,91,93,97,98,99,108,109,110,111,112,114,115,116,117,118,],[13,13,-1,-3,-4,-5,-6,-7,-2,-8,-9,-10,-12,-14,-16,-18,-21,13,13,-49,-11,-13,-15,-17,-19,13,13,-37,13,13,-36,-33,-39,13,13,13,13,13,13,-34,]),'MILITO':([0,1,2,3,4,5,6,7,26,27,28,55,57,59,61,63,72,73,84,85,86,87,88,89,90,91,93,97,98,99,108,109,110,111,112,114,115,116,117,118,],[14,14,-1,-3,-4,-5,-6,-7,-2,-8,-9,-10,-12,-14,-16,-18,-21,14,14,-49,-11,-13,-15,-17,-19,14,14,-37,14,14,-36,-33,-39,14,14,14,14,14,14,-34,]),'ZIDANE':([0,1,2,3,4,5,6,7,26,27,28,55,57,59,61,63,72,73,84,85,86,87,88,89,90,91,93,97,98,99,108,109,110,111,112,114,115,116,117,118,],[15,15,-1,-3,-4,-5,-6,-7,-2,-8,-9,-10,-12,-14,-16,-18,-21,15,15,-49,-11,-13,-15,-17,-19,15,15,-37,15,15,-36,-33,-39,15,15,15,15,15,15,-34,]),'SAVIOLA':([0,1,2,3,4,5,6,7,26,27,28,55,57,59,61,63,72,73,84,85,86,87,88,89,90,91,93,97,98,99,108,109,110,111,112,114,115,116,117,118,],[16,16,-1,-3,-4,-5,-6,-7,-2,-8,-9,-10,-12,-14,-16,-18,-21,16,16,-49,-11,-13,-15,-17,-19,16,16,-37,16,16,-36,-33,-39,16,16,16,16,16,16,-34,]),'INIESTA':([0,1,2,3,4,5,6,7,26,27,28,55,57,59,61,63,72,73,84,85,86,87,88,89,90,91,93,97,98,99,108,109,110,111,112,114,115,116,117,118,],[17,17,-1,-3,-4,-5,-6,-7,-2,-8,-9,-10,-12,-14,-16,-18,-21,17,17,-49,-11,-13,-15,-17,-19,17,17,-37,17,17,-36,-33,-39,17,17,17,17,17,17,-34,]),'VALDERRAMA':([0,1,2,3,4,5,6,7,26,27,28,55,57,59,61,63,72,73,84,85,86,87,88,89,90,91,93,97,98,99,108,109,110,111,112,114,115,116,117,118,],[18,18,-1,-3,-4,-5,-6,-7,-2,-8,-9,-10,-12,-14,-16,-18,-21,18,18,-49,-11,-13,-15,-17,-19,18,18,-37,18,18,-36,-33,-39,18,18,18,18,18,18,-34,]),'IDENTIFIER':([0,1,2,3,4,5,6,7,11,14,15,16,17,18,26,27,28,29,30,31,35,37,43,44,45,46,55,56,57,58,59,60,61,62,63,64,72,73,81,84,85,86,87,88,89,90,91,93,97,98,99,108,109,110,111,112,114,115,116,117,118,],[12,12,-1,-3,-4,-5,-6,-7,33,38,39,40,41,42,-2,-8,-9,33,33,49,33,33,66,66,33,33,-10,33,-12,33,-14,33,-16,33,-18,33,-21,12,33,12,-49,-11,-13,-15,-17,-19,12,12,-37,12,12,-36,-33,-39,12,12,12,12,12,12,-34,]),'WALKER':([0,1,2,3,4,5,6,7,26,27,28,55,57,59,61,63,72,73,84,85,86,87,88,89,90,91,93,97,98,99,108,109,110,111,112,114,115,116,117,118,],[19,19,-1,-3,-4,-5,-6,-7,-2,-8,-9,-10,-12,-14,-16,-18,-21,19,19,-49,-11,-13,-15,-17,-19,19,19,-37,19,19,-36,-33,-39,19,19,19,19,19,19,-34,]),'BALLACK':([0,1,2,3,4,5,6,7,26,27,28,55,57,59,61,63,72,73,84,85,86,87,88,89,90,91,93,97,98,99,108,109,110,111,112,114,115,116,117,118,],[20,20,-1,-3,-4,-5,-6,-7,-2,-8,-9,-10,-12,-14,-16,-18,-21,20,20,-49,-11,-13,-15,-17,-19,20,20,-37,20,20,-36,-33,-39,20,20,20,20,20,20,-34,]),'LPAREN':([0,1,2,3,4,5,6,7,10,11,12,13,19,20,26,27,28,29,30,33,35,37,45,46,55,56,57,58,59,60,61,62,63,64,72,73,81,84,85,86,87,88,89,90,91,93,97,98,99,108,109,110,111,112,114,115,116,117,118,],[11,11,-1,-3,-4,-5,-6,-7,31,11,36,37,43,44,-2,-8,-9,11,11,51,11,11,11,11,-10,11,-12,11,-14,11,-16,11,-18,11,-21,11,11,11,-49,-11,-13,-15,-17,-19,11,11,-37,11,11,-36,-33,-39,11,11,11,11,11,11,-34,]),'NUMBER':([0,1,2,3,4,5,6,7,11,26,27,28,29,30,35,37,45,46,55,56,57,58,59,60,61,62,63,64,72,73,81,84,85,86,87,88,89,90,91,93,96,97,98,99,108,109,110,111,112,114,115,116,117,118,],[23,23,-1,-3,-4,-5,-6,-7,23,-2,-8,-9,23,23,23,23,23,23,-10,23,-12,23,-14,23,-16,23,-18,23,-21,23,23,23,-49,-11,-13,-15,-17,-19,23,23,105,-37,23,23,-36,-33,-39,23,23,23,23,23,23,-34,]),'STRING_LITERAL':([0,1,2,3,4,5,6,7,11,26,27,28,29,30,35,37,45,46,55,56,57,58,59,60,61,62,63,64,72,73,81,84,85,86,87,88,89,90,91,93,96,97,98,99,108,109,110,111,112,114,115,116,117,118,],[24,24,-1,-3,-4,-5,-6,-7,24,-2,-8,-9,24,24,24,24,24,24,-10,24,-12,24,-14,24,-16,24,-18,24,-21,24,24,24,-49,-11,-13,-15,-17,-19,24,24,106,-37,24,24,-36,-33,-39,24,24,24,24,24,24,-34,]),'CHAR_LITERAL':([0,1,2,3,4,5,6,7,11,26,27,28,29,30,35,37,45,46,55,56,57,58,59,60,61,62,63,64,72,73,81,84,85,86,87,88,89,90,91,93,96,97,98,99,108,109,110,111,112,114,115,116,117,118,],[25,25,-1,-3,-4,-5,-6,-7,25,-2,-8,-9,25,25,25,25,25,25,-10,25,-12,25,-14,25,-16,25,-18,25,-21,25,25,25,-49,-11,-13,-15,-17,-19,25,25,107,-37,25,25,-36,-33,-39,25,25,25,25,25,25,-34,]),'$end':([1,2,3,4,5,6,7,26,27,28,55,57,59,61,63,72,85,86,87,88,89,90,97,108,109,110,118,],[0,-1,-3,-4,-5,-6,-7,-2,-8,-9,-10,-12,-14,-16,-18,-21,-49,-11,-13,-15,-17,-19,-37,-36,-33,-39,-34,]),'RBRACE':([2,3,4,5,6,7,26,27,28,55,57,59,61,63,72,84,85,86,87,88,89,90,94,95,97,98,99,100,101,103,108,109,110,114,115,117,118,],[-1,-3,-4,-5,-6,-7,-2,-8,-9,-10,-12,-14,-16,-18,-21,97,-49,-11,-13,-15,-17,-19,-40,-42,-37,108,109,110,-41,-45,-36,-33,-39,-44,-43,118,-34,]),'RONALDINHO':([2,3,4,5,6,7,26,27,28,55,57,59,61,63,72,85,86,87,88,89,90,94,95,97,101,108,109,110,115,118,],[-1,-3,-4,-5,-6,-7,-2,-8,-9,-10,-12,-14,-16,-18,-21,-49,-11,-13,-15,-17,-19,102,-42,-37,-41,-36,-33,-39,-43,-34,]),'SON':([2,3,4,5,6,7,26,27,28,55,57,59,61,63,72,83,85,86,87,88,89,90,94,95,97,101,108,109,110,115,118,],[-1,-3,-4,-5,-6,-7,-2,-8,-9,-10,-12,-14,-16,-18,-21,96,-49,-11,-13,-15,-17,-19,96,-42,-37,-41,-36,-33,-39,-43,-34,]),'SEMICOLON':([8,9,12,21,22,23,24,25,33,34,38,39,40,41,42,47,48,50,52,53,68,69,71,74,75,76,77,78,79,],[27,28,-29,-24,-27,-28,-30,-31,-29,-32,55,57,59,61,63,-22,-23,-20,72,-38,-25,-26,-38,85,86,87,88,89,90,]),'MESSI':([8,12,21,22,23,24,25,33,34,47,48,50,53,68,69,71,],[-32,-29,45,-27,-28,-30,-31,-29,-32,45,45,-20,-38,-25,-26,-38,]),'PEPE':([8,12,21,22,23,24,25,33,34,47,48,50,53,68,69,71,],[-32,-29,46,-27,-28,-30,-31,-29,-32,46,46,-20,-38,-25,-26,-38,]),'CRISTIANO':([8,9,12,21,22,23,24,25,32,33,34,47,48,50,52,53,54,68,69,71,75,76,77,78,79,92,],[-32,29,-29,-24,-27,-28,-30,-31,29,-29,-32,-22,-23,-20,29,-38,29,-25,-26,-38,29,29,29,29,29,29,]),'TCHOUAMENI':([8,9,12,21,22,23,24,25,32,33,34,47,48,50,52,53,54,68,69,71,75,76,77,78,79,92,],[-32,30,-29,-24,-27,-28,-30,-31,30,-29,-32,-22,-23,-20,30,-38,30,-25,-26,-38,30,30,30,30,30,30,]),'EQUALS':([12,38,39,40,41,42,],[35,56,58,60,62,64,]),'RPAREN':([21,22,23,24,25,32,33,34,36,47,48,49,50,51,54,65,67,68,69,71,92,],[-24,-27,-28,-30,-31,50,-29,-32,53,-22,-23,70,-20,71,74,80,82,-25,-26,-38,-35,]),'LBRACE':([53,70,80,82,113,],[73,83,91,93,116,]),'RELOP':([66,],[81,]),'COLON':([102,104,105,106,107,],[111,112,-46,-47,-48,]),'ROBBEN':([109,],[113,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,73,91,93,111,112,116,],[1,84,98,99,114,115,117,]),'statement':([0,1,73,84,91,93,98,99,111,112,114,115,116,117,],[2,26,2,26,2,2,26,26,2,2,26,26,2,26,]),'declaration':([0,1,73,84,91,93,98,99,111,112,114,115,116,117,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'assignment':([0,1,73,84,91,93,98,99,111,112,114,115,116,117,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'while_loop':([0,1,73,84,91,93,98,99,111,112,114,115,116,117,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'if_statement':([0,1,73,84,91,93,98,99,111,112,114,115,116,117,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'method_declaration':([0,1,73,84,91,93,98,99,111,112,114,115,116,117,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'method_call':([0,1,11,29,30,35,37,45,46,56,58,60,62,64,73,81,84,91,93,98,99,111,112,114,115,116,117,],[8,8,34,34,34,34,34,34,34,34,34,34,34,34,8,34,8,8,8,8,8,8,8,8,8,8,8,]),'expression':([0,1,11,35,37,56,58,60,62,64,73,81,84,91,93,98,99,111,112,114,115,116,117,],[9,9,32,52,54,75,76,77,78,79,9,92,9,9,9,9,9,9,9,9,9,9,9,]),'term':([0,1,11,29,30,35,37,56,58,60,62,64,73,81,84,91,93,98,99,111,112,114,115,116,117,],[21,21,21,47,48,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'factor':([0,1,11,29,30,35,37,45,46,56,58,60,62,64,73,81,84,91,93,98,99,111,112,114,115,116,117,],[22,22,22,22,22,22,22,68,69,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'condition':([43,44,],[65,67,]),'cases':([83,],[94,]),'case':([83,94,],[95,101,]),'default_case':([94,],[100,]),'empty':([94,],[103,]),'value':([96,],[104,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement','program',1,'p_program','parser.py',12),
  ('program -> program statement','program',2,'p_program','parser.py',13),
  ('statement -> declaration','statement',1,'p_statement','parser.py',22),
  ('statement -> assignment','statement',1,'p_statement','parser.py',23),
  ('statement -> while_loop','statement',1,'p_statement','parser.py',24),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',25),
  ('statement -> method_declaration','statement',1,'p_statement','parser.py',26),
  ('statement -> method_call SEMICOLON','statement',2,'p_statement','parser.py',27),
  ('statement -> expression SEMICOLON','statement',2,'p_statement','parser.py',28),
  ('declaration -> MILITO IDENTIFIER SEMICOLON','declaration',3,'p_declaration','parser.py',32),
  ('declaration -> MILITO IDENTIFIER EQUALS expression SEMICOLON','declaration',5,'p_declaration','parser.py',33),
  ('declaration -> ZIDANE IDENTIFIER SEMICOLON','declaration',3,'p_declaration','parser.py',34),
  ('declaration -> ZIDANE IDENTIFIER EQUALS expression SEMICOLON','declaration',5,'p_declaration','parser.py',35),
  ('declaration -> SAVIOLA IDENTIFIER SEMICOLON','declaration',3,'p_declaration','parser.py',36),
  ('declaration -> SAVIOLA IDENTIFIER EQUALS expression SEMICOLON','declaration',5,'p_declaration','parser.py',37),
  ('declaration -> INIESTA IDENTIFIER SEMICOLON','declaration',3,'p_declaration','parser.py',38),
  ('declaration -> INIESTA IDENTIFIER EQUALS expression SEMICOLON','declaration',5,'p_declaration','parser.py',39),
  ('declaration -> VALDERRAMA IDENTIFIER SEMICOLON','declaration',3,'p_declaration','parser.py',40),
  ('declaration -> VALDERRAMA IDENTIFIER EQUALS expression SEMICOLON','declaration',5,'p_declaration','parser.py',41),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_grouped','parser.py',48),
  ('assignment -> IDENTIFIER EQUALS expression SEMICOLON','assignment',4,'p_assignment','parser.py',52),
  ('expression -> expression CRISTIANO term','expression',3,'p_expression','parser.py',56),
  ('expression -> expression TCHOUAMENI term','expression',3,'p_expression','parser.py',57),
  ('expression -> term','expression',1,'p_expression','parser.py',58),
  ('term -> term MESSI factor','term',3,'p_term','parser.py',65),
  ('term -> term PEPE factor','term',3,'p_term','parser.py',66),
  ('term -> factor','term',1,'p_term','parser.py',67),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',74),
  ('factor -> IDENTIFIER','factor',1,'p_factor','parser.py',75),
  ('factor -> STRING_LITERAL','factor',1,'p_factor','parser.py',76),
  ('factor -> CHAR_LITERAL','factor',1,'p_factor','parser.py',77),
  ('factor -> method_call','factor',1,'p_factor','parser.py',78),
  ('if_statement -> BALLACK LPAREN condition RPAREN LBRACE program RBRACE','if_statement',7,'p_if_statement','parser.py',83),
  ('if_statement -> BALLACK LPAREN condition RPAREN LBRACE program RBRACE ROBBEN LBRACE program RBRACE','if_statement',11,'p_if_statement','parser.py',84),
  ('condition -> IDENTIFIER RELOP expression','condition',3,'p_condition','parser.py',92),
  ('while_loop -> WALKER LPAREN condition RPAREN LBRACE program RBRACE','while_loop',7,'p_while_loop','parser.py',97),
  ('method_declaration -> IDENTIFIER LPAREN RPAREN LBRACE program RBRACE','method_declaration',6,'p_method_declaration','parser.py',112),
  ('method_call -> IDENTIFIER LPAREN RPAREN','method_call',3,'p_method_call','parser.py',116),
  ('statement -> FORLAN LPAREN IDENTIFIER RPAREN LBRACE cases default_case RBRACE','statement',8,'p_switch_statement','parser.py',121),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',127),
  ('cases -> cases case','cases',2,'p_cases','parser.py',131),
  ('cases -> case','cases',1,'p_cases','parser.py',132),
  ('case -> SON value COLON program','case',4,'p_case','parser.py',139),
  ('default_case -> RONALDINHO COLON program','default_case',3,'p_default_case','parser.py',143),
  ('default_case -> empty','default_case',1,'p_default_case','parser.py',144),
  ('value -> NUMBER','value',1,'p_value','parser.py',151),
  ('value -> STRING_LITERAL','value',1,'p_value','parser.py',152),
  ('value -> CHAR_LITERAL','value',1,'p_value','parser.py',153),
  ('statement -> COUTINHO LPAREN expression RPAREN SEMICOLON','statement',5,'p_statement_mostrar','parser.py',165),
]
