
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BALLACK CHAR_LITERAL COLON COMMA CRISTIANO DOT EQUALS FORLAN GLOBAL GT IDENTIFIER INIESTA LBRACE LOCAL LPAREN LT MESSI MILITO NUMBER PEPE QUOTE RBRACE RELOP ROBBEN RONALDINHO RPAREN SAVIOLA SEMICOLON SON STRING_LITERAL TCHOUAMENI VALDERRAMA WALKER ZIDANEprogram : statement\n                | program statementstatement : declaration\n                     | assignment\n                     | while_loop\n                     | if_statement\n                     | method_declaration\n                     | method_call SEMICOLON\n                     | expression SEMICOLONdeclaration : MILITO IDENTIFIER SEMICOLON\n                       | MILITO IDENTIFIER EQUALS expression SEMICOLON\n                       | ZIDANE IDENTIFIER SEMICOLON\n                       | ZIDANE IDENTIFIER EQUALS expression SEMICOLON\n                       | SAVIOLA IDENTIFIER SEMICOLON\n                       | SAVIOLA IDENTIFIER EQUALS expression SEMICOLON\n                       | INIESTA IDENTIFIER SEMICOLON\n                       | INIESTA IDENTIFIER EQUALS expression SEMICOLON\n                       | VALDERRAMA IDENTIFIER SEMICOLON\n                       | VALDERRAMA IDENTIFIER EQUALS expression SEMICOLONassignment : IDENTIFIER EQUALS expression SEMICOLONexpression : expression CRISTIANO term\n                      | expression TCHOUAMENI term\n                      | termterm : term MESSI factor\n                | term PEPE factor\n                | factorfactor : NUMBER\n                  | IDENTIFIER\n                  | STRING_LITERAL\n                  | CHAR_LITERAL\n                  | method_callif_statement : BALLACK LPAREN condition RPAREN LBRACE program RBRACE\n                        | BALLACK LPAREN condition RPAREN LBRACE program RBRACE ROBBEN LBRACE program RBRACEcondition : IDENTIFIER RELOP expressionwhile_loop : WALKER LPAREN condition RPAREN LBRACE program RBRACEmethod_declaration : IDENTIFIER LPAREN RPAREN LBRACE program RBRACEmethod_call : IDENTIFIER LPAREN RPARENstatement : FORLAN LPAREN IDENTIFIER RPAREN LBRACE cases default_case RBRACEempty :cases : cases case\n                | casecase : SON value COLON programdefault_case : RONALDINHO COLON program\n                        | emptyvalue : NUMBER\n                | STRING_LITERAL\n                | CHAR_LITERAL'
    
_lr_action_items = {'FORLAN':([0,1,2,3,4,5,6,7,24,25,26,48,50,52,54,56,65,66,77,78,79,80,81,82,83,85,89,90,91,100,101,102,103,104,106,107,108,109,110,],[10,10,-1,-3,-4,-5,-6,-7,-2,-8,-9,-10,-12,-14,-16,-18,-20,10,10,-11,-13,-15,-17,-19,10,10,-36,10,10,-35,-32,-38,10,10,10,10,10,10,-33,]),'MILITO':([0,1,2,3,4,5,6,7,24,25,26,48,50,52,54,56,65,66,77,78,79,80,81,82,83,85,89,90,91,100,101,102,103,104,106,107,108,109,110,],[12,12,-1,-3,-4,-5,-6,-7,-2,-8,-9,-10,-12,-14,-16,-18,-20,12,12,-11,-13,-15,-17,-19,12,12,-36,12,12,-35,-32,-38,12,12,12,12,12,12,-33,]),'ZIDANE':([0,1,2,3,4,5,6,7,24,25,26,48,50,52,54,56,65,66,77,78,79,80,81,82,83,85,89,90,91,100,101,102,103,104,106,107,108,109,110,],[13,13,-1,-3,-4,-5,-6,-7,-2,-8,-9,-10,-12,-14,-16,-18,-20,13,13,-11,-13,-15,-17,-19,13,13,-36,13,13,-35,-32,-38,13,13,13,13,13,13,-33,]),'SAVIOLA':([0,1,2,3,4,5,6,7,24,25,26,48,50,52,54,56,65,66,77,78,79,80,81,82,83,85,89,90,91,100,101,102,103,104,106,107,108,109,110,],[14,14,-1,-3,-4,-5,-6,-7,-2,-8,-9,-10,-12,-14,-16,-18,-20,14,14,-11,-13,-15,-17,-19,14,14,-36,14,14,-35,-32,-38,14,14,14,14,14,14,-33,]),'INIESTA':([0,1,2,3,4,5,6,7,24,25,26,48,50,52,54,56,65,66,77,78,79,80,81,82,83,85,89,90,91,100,101,102,103,104,106,107,108,109,110,],[15,15,-1,-3,-4,-5,-6,-7,-2,-8,-9,-10,-12,-14,-16,-18,-20,15,15,-11,-13,-15,-17,-19,15,15,-36,15,15,-35,-32,-38,15,15,15,15,15,15,-33,]),'VALDERRAMA':([0,1,2,3,4,5,6,7,24,25,26,48,50,52,54,56,65,66,77,78,79,80,81,82,83,85,89,90,91,100,101,102,103,104,106,107,108,109,110,],[16,16,-1,-3,-4,-5,-6,-7,-2,-8,-9,-10,-12,-14,-16,-18,-20,16,16,-11,-13,-15,-17,-19,16,16,-36,16,16,-35,-32,-38,16,16,16,16,16,16,-33,]),'IDENTIFIER':([0,1,2,3,4,5,6,7,12,13,14,15,16,24,25,26,27,28,29,30,37,38,39,40,48,49,50,51,52,53,54,55,56,57,65,66,73,77,78,79,80,81,82,83,85,89,90,91,100,101,102,103,104,106,107,108,109,110,],[11,11,-1,-3,-4,-5,-6,-7,32,33,34,35,36,-2,-8,-9,42,42,45,42,59,59,42,42,-10,42,-12,42,-14,42,-16,42,-18,42,-20,11,42,11,-11,-13,-15,-17,-19,11,11,-36,11,11,-35,-32,-38,11,11,11,11,11,11,-33,]),'WALKER':([0,1,2,3,4,5,6,7,24,25,26,48,50,52,54,56,65,66,77,78,79,80,81,82,83,85,89,90,91,100,101,102,103,104,106,107,108,109,110,],[17,17,-1,-3,-4,-5,-6,-7,-2,-8,-9,-10,-12,-14,-16,-18,-20,17,17,-11,-13,-15,-17,-19,17,17,-36,17,17,-35,-32,-38,17,17,17,17,17,17,-33,]),'BALLACK':([0,1,2,3,4,5,6,7,24,25,26,48,50,52,54,56,65,66,77,78,79,80,81,82,83,85,89,90,91,100,101,102,103,104,106,107,108,109,110,],[18,18,-1,-3,-4,-5,-6,-7,-2,-8,-9,-10,-12,-14,-16,-18,-20,18,18,-11,-13,-15,-17,-19,18,18,-36,18,18,-35,-32,-38,18,18,18,18,18,18,-33,]),'NUMBER':([0,1,2,3,4,5,6,7,24,25,26,27,28,30,39,40,48,49,50,51,52,53,54,55,56,57,65,66,73,77,78,79,80,81,82,83,85,88,89,90,91,100,101,102,103,104,106,107,108,109,110,],[21,21,-1,-3,-4,-5,-6,-7,-2,-8,-9,21,21,21,21,21,-10,21,-12,21,-14,21,-16,21,-18,21,-20,21,21,21,-11,-13,-15,-17,-19,21,21,97,-36,21,21,-35,-32,-38,21,21,21,21,21,21,-33,]),'STRING_LITERAL':([0,1,2,3,4,5,6,7,24,25,26,27,28,30,39,40,48,49,50,51,52,53,54,55,56,57,65,66,73,77,78,79,80,81,82,83,85,88,89,90,91,100,101,102,103,104,106,107,108,109,110,],[22,22,-1,-3,-4,-5,-6,-7,-2,-8,-9,22,22,22,22,22,-10,22,-12,22,-14,22,-16,22,-18,22,-20,22,22,22,-11,-13,-15,-17,-19,22,22,98,-36,22,22,-35,-32,-38,22,22,22,22,22,22,-33,]),'CHAR_LITERAL':([0,1,2,3,4,5,6,7,24,25,26,27,28,30,39,40,48,49,50,51,52,53,54,55,56,57,65,66,73,77,78,79,80,81,82,83,85,88,89,90,91,100,101,102,103,104,106,107,108,109,110,],[23,23,-1,-3,-4,-5,-6,-7,-2,-8,-9,23,23,23,23,23,-10,23,-12,23,-14,23,-16,23,-18,23,-20,23,23,23,-11,-13,-15,-17,-19,23,23,99,-36,23,23,-35,-32,-38,23,23,23,23,23,23,-33,]),'$end':([1,2,3,4,5,6,7,24,25,26,48,50,52,54,56,65,78,79,80,81,82,89,100,101,102,110,],[0,-1,-3,-4,-5,-6,-7,-2,-8,-9,-10,-12,-14,-16,-18,-20,-11,-13,-15,-17,-19,-36,-35,-32,-38,-33,]),'RBRACE':([2,3,4,5,6,7,24,25,26,48,50,52,54,56,65,77,78,79,80,81,82,86,87,89,90,91,92,93,95,100,101,102,106,107,109,110,],[-1,-3,-4,-5,-6,-7,-2,-8,-9,-10,-12,-14,-16,-18,-20,89,-11,-13,-15,-17,-19,-39,-41,-36,100,101,102,-40,-44,-35,-32,-38,-43,-42,110,-33,]),'RONALDINHO':([2,3,4,5,6,7,24,25,26,48,50,52,54,56,65,78,79,80,81,82,86,87,89,93,100,101,102,107,110,],[-1,-3,-4,-5,-6,-7,-2,-8,-9,-10,-12,-14,-16,-18,-20,-11,-13,-15,-17,-19,94,-41,-36,-40,-35,-32,-38,-42,-33,]),'SON':([2,3,4,5,6,7,24,25,26,48,50,52,54,56,65,76,78,79,80,81,82,86,87,89,93,100,101,102,107,110,],[-1,-3,-4,-5,-6,-7,-2,-8,-9,-10,-12,-14,-16,-18,-20,88,-11,-13,-15,-17,-19,88,-41,-36,-40,-35,-32,-38,-42,-33,]),'SEMICOLON':([8,9,11,19,20,21,22,23,32,33,34,35,36,41,42,43,44,46,47,61,62,67,68,69,70,71,75,],[25,26,-28,-23,-26,-27,-29,-30,48,50,52,54,56,-21,-28,-31,-22,65,-37,-24,-25,78,79,80,81,82,-37,]),'MESSI':([8,11,19,20,21,22,23,41,42,43,44,47,61,62,75,],[-31,-28,39,-26,-27,-29,-30,39,-28,-31,39,-37,-24,-25,-37,]),'PEPE':([8,11,19,20,21,22,23,41,42,43,44,47,61,62,75,],[-31,-28,40,-26,-27,-29,-30,40,-28,-31,40,-37,-24,-25,-37,]),'CRISTIANO':([8,9,11,19,20,21,22,23,41,42,43,44,46,47,61,62,67,68,69,70,71,75,84,],[-31,27,-28,-23,-26,-27,-29,-30,-21,-28,-31,-22,27,-37,-24,-25,27,27,27,27,27,-37,27,]),'TCHOUAMENI':([8,9,11,19,20,21,22,23,41,42,43,44,46,47,61,62,67,68,69,70,71,75,84,],[-31,28,-28,-23,-26,-27,-29,-30,-21,-28,-31,-22,28,-37,-24,-25,28,28,28,28,28,-37,28,]),'LPAREN':([10,11,17,18,42,],[29,31,37,38,63,]),'EQUALS':([11,32,33,34,35,36,],[30,49,51,53,55,57,]),'RPAREN':([19,20,21,22,23,31,41,42,43,44,45,58,60,61,62,63,75,84,],[-23,-26,-27,-29,-30,47,-21,-28,-31,-22,64,72,74,-24,-25,75,-37,-34,]),'LBRACE':([47,64,72,74,105,],[66,76,83,85,108,]),'RELOP':([59,],[73,]),'COLON':([94,96,97,98,99,],[103,104,-45,-46,-47,]),'ROBBEN':([101,],[105,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,66,83,85,103,104,108,],[1,77,90,91,106,107,109,]),'statement':([0,1,66,77,83,85,90,91,103,104,106,107,108,109,],[2,24,2,24,2,2,24,24,2,2,24,24,2,24,]),'declaration':([0,1,66,77,83,85,90,91,103,104,106,107,108,109,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'assignment':([0,1,66,77,83,85,90,91,103,104,106,107,108,109,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'while_loop':([0,1,66,77,83,85,90,91,103,104,106,107,108,109,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'if_statement':([0,1,66,77,83,85,90,91,103,104,106,107,108,109,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'method_declaration':([0,1,66,77,83,85,90,91,103,104,106,107,108,109,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'method_call':([0,1,27,28,30,39,40,49,51,53,55,57,66,73,77,83,85,90,91,103,104,106,107,108,109,],[8,8,43,43,43,43,43,43,43,43,43,43,8,43,8,8,8,8,8,8,8,8,8,8,8,]),'expression':([0,1,30,49,51,53,55,57,66,73,77,83,85,90,91,103,104,106,107,108,109,],[9,9,46,67,68,69,70,71,9,84,9,9,9,9,9,9,9,9,9,9,9,]),'term':([0,1,27,28,30,49,51,53,55,57,66,73,77,83,85,90,91,103,104,106,107,108,109,],[19,19,41,44,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'factor':([0,1,27,28,30,39,40,49,51,53,55,57,66,73,77,83,85,90,91,103,104,106,107,108,109,],[20,20,20,20,20,61,62,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'condition':([37,38,],[58,60,]),'cases':([76,],[86,]),'case':([76,86,],[87,93,]),'default_case':([86,],[92,]),'empty':([86,],[95,]),'value':([88,],[96,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement','program',1,'p_program','parser.py',12),
  ('program -> program statement','program',2,'p_program','parser.py',13),
  ('statement -> declaration','statement',1,'p_statement','parser.py',22),
  ('statement -> assignment','statement',1,'p_statement','parser.py',23),
  ('statement -> while_loop','statement',1,'p_statement','parser.py',24),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',25),
  ('statement -> method_declaration','statement',1,'p_statement','parser.py',26),
  ('statement -> method_call SEMICOLON','statement',2,'p_statement','parser.py',27),
  ('statement -> expression SEMICOLON','statement',2,'p_statement','parser.py',28),
  ('declaration -> MILITO IDENTIFIER SEMICOLON','declaration',3,'p_declaration','parser.py',32),
  ('declaration -> MILITO IDENTIFIER EQUALS expression SEMICOLON','declaration',5,'p_declaration','parser.py',33),
  ('declaration -> ZIDANE IDENTIFIER SEMICOLON','declaration',3,'p_declaration','parser.py',34),
  ('declaration -> ZIDANE IDENTIFIER EQUALS expression SEMICOLON','declaration',5,'p_declaration','parser.py',35),
  ('declaration -> SAVIOLA IDENTIFIER SEMICOLON','declaration',3,'p_declaration','parser.py',36),
  ('declaration -> SAVIOLA IDENTIFIER EQUALS expression SEMICOLON','declaration',5,'p_declaration','parser.py',37),
  ('declaration -> INIESTA IDENTIFIER SEMICOLON','declaration',3,'p_declaration','parser.py',38),
  ('declaration -> INIESTA IDENTIFIER EQUALS expression SEMICOLON','declaration',5,'p_declaration','parser.py',39),
  ('declaration -> VALDERRAMA IDENTIFIER SEMICOLON','declaration',3,'p_declaration','parser.py',40),
  ('declaration -> VALDERRAMA IDENTIFIER EQUALS expression SEMICOLON','declaration',5,'p_declaration','parser.py',41),
  ('assignment -> IDENTIFIER EQUALS expression SEMICOLON','assignment',4,'p_assignment','parser.py',49),
  ('expression -> expression CRISTIANO term','expression',3,'p_expression','parser.py',53),
  ('expression -> expression TCHOUAMENI term','expression',3,'p_expression','parser.py',54),
  ('expression -> term','expression',1,'p_expression','parser.py',55),
  ('term -> term MESSI factor','term',3,'p_term','parser.py',62),
  ('term -> term PEPE factor','term',3,'p_term','parser.py',63),
  ('term -> factor','term',1,'p_term','parser.py',64),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',71),
  ('factor -> IDENTIFIER','factor',1,'p_factor','parser.py',72),
  ('factor -> STRING_LITERAL','factor',1,'p_factor','parser.py',73),
  ('factor -> CHAR_LITERAL','factor',1,'p_factor','parser.py',74),
  ('factor -> method_call','factor',1,'p_factor','parser.py',75),
  ('if_statement -> BALLACK LPAREN condition RPAREN LBRACE program RBRACE','if_statement',7,'p_if_statement','parser.py',80),
  ('if_statement -> BALLACK LPAREN condition RPAREN LBRACE program RBRACE ROBBEN LBRACE program RBRACE','if_statement',11,'p_if_statement','parser.py',81),
  ('condition -> IDENTIFIER RELOP expression','condition',3,'p_condition','parser.py',89),
  ('while_loop -> WALKER LPAREN condition RPAREN LBRACE program RBRACE','while_loop',7,'p_while_loop','parser.py',94),
  ('method_declaration -> IDENTIFIER LPAREN RPAREN LBRACE program RBRACE','method_declaration',6,'p_method_declaration','parser.py',109),
  ('method_call -> IDENTIFIER LPAREN RPAREN','method_call',3,'p_method_call','parser.py',113),
  ('statement -> FORLAN LPAREN IDENTIFIER RPAREN LBRACE cases default_case RBRACE','statement',8,'p_switch_statement','parser.py',118),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',124),
  ('cases -> cases case','cases',2,'p_cases','parser.py',128),
  ('cases -> case','cases',1,'p_cases','parser.py',129),
  ('case -> SON value COLON program','case',4,'p_case','parser.py',136),
  ('default_case -> RONALDINHO COLON program','default_case',3,'p_default_case','parser.py',140),
  ('default_case -> empty','default_case',1,'p_default_case','parser.py',141),
  ('value -> NUMBER','value',1,'p_value','parser.py',148),
  ('value -> STRING_LITERAL','value',1,'p_value','parser.py',149),
  ('value -> CHAR_LITERAL','value',1,'p_value','parser.py',150),
]
