
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCRISTIANOTCHOUAMENIleftMESSIPEPEAGUERO BALLACK CHAR_LITERAL COLON COMMA COUTINHO CRISTIANO DOT EQUALS FORLAN GLOBAL GT IDENTIFIER INIESTA LBRACE LOCAL LPAREN LT MESSI MILITO NUMBER PEPE QUOTE RAMOS RBRACE RELOP ROBBEN ROMAN RONALDINHO RPAREN SAVIOLA SEMICOLON SON STRING_LITERAL TCHOUAMENI VALDERRAMA WALKER ZIDANEprogram : statement\n| program statementstatement : declaration\n| assignment\n| while_loop\n| do_while_loop\n| for_loop\n| if_statement\n| method_declaration\n| method_call SEMICOLON\n| expression SEMICOLON\n| break_statement\n| COUTINHO LPAREN expression RPAREN SEMICOLONfor_init : declaration_no_semicolon\n| assignment_no_semicolonassignment_no_semicolon : IDENTIFIER EQUALS expressiondeclaration_no_semicolon : MILITO IDENTIFIER EQUALS expression\n| ZIDANE IDENTIFIER EQUALS expression\n| SAVIOLA IDENTIFIER EQUALS expression\n| INIESTA IDENTIFIER EQUALS expression\n| VALDERRAMA IDENTIFIER EQUALS expressionfor_loop : RAMOS LPAREN for_init SEMICOLON condition SEMICOLON assignment_no_semicolon RPAREN LBRACE program RBRACEdo_while_loop : AGUERO LBRACE program RBRACE WALKER LPAREN condition RPAREN SEMICOLONdeclaration : MILITO IDENTIFIER SEMICOLON\n| MILITO IDENTIFIER EQUALS expression SEMICOLON\n| ZIDANE IDENTIFIER SEMICOLON\n| ZIDANE IDENTIFIER EQUALS expression SEMICOLON\n| SAVIOLA IDENTIFIER SEMICOLON\n| SAVIOLA IDENTIFIER EQUALS expression SEMICOLON\n| INIESTA IDENTIFIER SEMICOLON\n| INIESTA IDENTIFIER EQUALS expression SEMICOLON\n| VALDERRAMA IDENTIFIER SEMICOLON\n| VALDERRAMA IDENTIFIER EQUALS expression SEMICOLONfactor : LPAREN expression RPARENassignment : IDENTIFIER EQUALS expression SEMICOLONexpression : expression CRISTIANO term\n| expression TCHOUAMENI term\n| termterm : term MESSI factor\n| term PEPE factor\n| factorfactor : NUMBER\n| IDENTIFIER\n| STRING_LITERAL\n| CHAR_LITERAL\n| method_callif_statement : BALLACK LPAREN condition RPAREN LBRACE program RBRACE\n| BALLACK LPAREN condition RPAREN LBRACE program RBRACE ROBBEN LBRACE program RBRACEcondition : IDENTIFIER RELOP expressionwhile_loop : WALKER LPAREN condition RPAREN LBRACE program RBRACEmethod_declaration : IDENTIFIER LPAREN RPAREN LBRACE program RBRACEmethod_call : IDENTIFIER LPAREN RPARENstatement : FORLAN LPAREN IDENTIFIER RPAREN LBRACE cases default_case RBRACEempty :cases : case\n| case casescase : SON value COLON programdefault_case : RONALDINHO COLON program\n| emptyvalue : NUMBER\n| STRING_LITERAL\n| CHAR_LITERALbreak_statement : ROMAN SEMICOLON'
    
_lr_action_items = {'COUTINHO':([0,1,2,3,4,5,6,7,8,9,12,32,33,34,50,55,64,66,68,70,72,76,92,93,110,112,113,114,115,116,117,118,128,132,133,141,150,153,154,155,156,160,161,162,163,164,165,166,167,168,],[13,13,-1,-3,-4,-5,-6,-7,-8,-9,-12,-2,-10,-11,13,-63,-24,-26,-28,-30,-32,13,-35,13,-13,13,-25,-27,-29,-31,-33,13,13,-51,13,13,-50,-47,-53,13,13,13,13,-23,13,13,13,13,-22,-48,]),'FORLAN':([0,1,2,3,4,5,6,7,8,9,12,32,33,34,50,55,64,66,68,70,72,76,92,93,110,112,113,114,115,116,117,118,128,132,133,141,150,153,154,155,156,160,161,162,163,164,165,166,167,168,],[15,15,-1,-3,-4,-5,-6,-7,-8,-9,-12,-2,-10,-11,15,-63,-24,-26,-28,-30,-32,15,-35,15,-13,15,-25,-27,-29,-31,-33,15,15,-51,15,15,-50,-47,-53,15,15,15,15,-23,15,15,15,15,-22,-48,]),'MILITO':([0,1,2,3,4,5,6,7,8,9,12,32,33,34,50,51,55,64,66,68,70,72,76,92,93,110,112,113,114,115,116,117,118,128,132,133,141,150,153,154,155,156,160,161,162,163,164,165,166,167,168,],[17,17,-1,-3,-4,-5,-6,-7,-8,-9,-12,-2,-10,-11,17,80,-63,-24,-26,-28,-30,-32,17,-35,17,-13,17,-25,-27,-29,-31,-33,17,17,-51,17,17,-50,-47,-53,17,17,17,17,-23,17,17,17,17,-22,-48,]),'ZIDANE':([0,1,2,3,4,5,6,7,8,9,12,32,33,34,50,51,55,64,66,68,70,72,76,92,93,110,112,113,114,115,116,117,118,128,132,133,141,150,153,154,155,156,160,161,162,163,164,165,166,167,168,],[18,18,-1,-3,-4,-5,-6,-7,-8,-9,-12,-2,-10,-11,18,82,-63,-24,-26,-28,-30,-32,18,-35,18,-13,18,-25,-27,-29,-31,-33,18,18,-51,18,18,-50,-47,-53,18,18,18,18,-23,18,18,18,18,-22,-48,]),'SAVIOLA':([0,1,2,3,4,5,6,7,8,9,12,32,33,34,50,51,55,64,66,68,70,72,76,92,93,110,112,113,114,115,116,117,118,128,132,133,141,150,153,154,155,156,160,161,162,163,164,165,166,167,168,],[19,19,-1,-3,-4,-5,-6,-7,-8,-9,-12,-2,-10,-11,19,83,-63,-24,-26,-28,-30,-32,19,-35,19,-13,19,-25,-27,-29,-31,-33,19,19,-51,19,19,-50,-47,-53,19,19,19,19,-23,19,19,19,19,-22,-48,]),'INIESTA':([0,1,2,3,4,5,6,7,8,9,12,32,33,34,50,51,55,64,66,68,70,72,76,92,93,110,112,113,114,115,116,117,118,128,132,133,141,150,153,154,155,156,160,161,162,163,164,165,166,167,168,],[20,20,-1,-3,-4,-5,-6,-7,-8,-9,-12,-2,-10,-11,20,84,-63,-24,-26,-28,-30,-32,20,-35,20,-13,20,-25,-27,-29,-31,-33,20,20,-51,20,20,-50,-47,-53,20,20,20,20,-23,20,20,20,20,-22,-48,]),'VALDERRAMA':([0,1,2,3,4,5,6,7,8,9,12,32,33,34,50,51,55,64,66,68,70,72,76,92,93,110,112,113,114,115,116,117,118,128,132,133,141,150,153,154,155,156,160,161,162,163,164,165,166,167,168,],[21,21,-1,-3,-4,-5,-6,-7,-8,-9,-12,-2,-10,-11,21,85,-63,-24,-26,-28,-30,-32,21,-35,21,-13,21,-25,-27,-29,-31,-33,21,21,-51,21,21,-50,-47,-53,21,21,21,21,-23,21,21,21,21,-22,-48,]),'IDENTIFIER':([0,1,2,3,4,5,6,7,8,9,12,14,17,18,19,20,21,32,33,34,35,36,37,41,42,49,50,51,52,53,54,55,64,65,66,67,68,69,70,71,72,73,76,80,82,83,84,85,92,93,100,102,104,110,112,113,114,115,116,117,118,122,124,125,126,127,128,132,133,134,135,141,150,153,154,155,156,160,161,162,163,164,165,166,167,168,],[16,16,-1,-3,-4,-5,-6,-7,-8,-9,-12,39,44,45,46,47,48,-2,-10,-11,39,39,39,61,39,75,16,81,75,39,39,-63,-24,39,-26,39,-28,39,-30,39,-32,39,16,103,105,106,107,108,-35,16,39,75,39,-13,16,-25,-27,-29,-31,-33,16,39,39,39,39,39,16,-51,16,75,81,16,-50,-47,-53,16,16,16,16,-23,16,16,16,16,-22,-48,]),'WALKER':([0,1,2,3,4,5,6,7,8,9,12,32,33,34,50,55,64,66,68,70,72,76,92,93,101,110,112,113,114,115,116,117,118,128,132,133,141,150,153,154,155,156,160,161,162,163,164,165,166,167,168,],[22,22,-1,-3,-4,-5,-6,-7,-8,-9,-12,-2,-10,-11,22,-63,-24,-26,-28,-30,-32,22,-35,22,120,-13,22,-25,-27,-29,-31,-33,22,22,-51,22,22,-50,-47,-53,22,22,22,22,-23,22,22,22,22,-22,-48,]),'AGUERO':([0,1,2,3,4,5,6,7,8,9,12,32,33,34,50,55,64,66,68,70,72,76,92,93,110,112,113,114,115,116,117,118,128,132,133,141,150,153,154,155,156,160,161,162,163,164,165,166,167,168,],[23,23,-1,-3,-4,-5,-6,-7,-8,-9,-12,-2,-10,-11,23,-63,-24,-26,-28,-30,-32,23,-35,23,-13,23,-25,-27,-29,-31,-33,23,23,-51,23,23,-50,-47,-53,23,23,23,23,-23,23,23,23,23,-22,-48,]),'RAMOS':([0,1,2,3,4,5,6,7,8,9,12,32,33,34,50,55,64,66,68,70,72,76,92,93,110,112,113,114,115,116,117,118,128,132,133,141,150,153,154,155,156,160,161,162,163,164,165,166,167,168,],[24,24,-1,-3,-4,-5,-6,-7,-8,-9,-12,-2,-10,-11,24,-63,-24,-26,-28,-30,-32,24,-35,24,-13,24,-25,-27,-29,-31,-33,24,24,-51,24,24,-50,-47,-53,24,24,24,24,-23,24,24,24,24,-22,-48,]),'BALLACK':([0,1,2,3,4,5,6,7,8,9,12,32,33,34,50,55,64,66,68,70,72,76,92,93,110,112,113,114,115,116,117,118,128,132,133,141,150,153,154,155,156,160,161,162,163,164,165,166,167,168,],[25,25,-1,-3,-4,-5,-6,-7,-8,-9,-12,-2,-10,-11,25,-63,-24,-26,-28,-30,-32,25,-35,25,-13,25,-25,-27,-29,-31,-33,25,25,-51,25,25,-50,-47,-53,25,25,25,25,-23,25,25,25,25,-22,-48,]),'ROMAN':([0,1,2,3,4,5,6,7,8,9,12,32,33,34,50,55,64,66,68,70,72,76,92,93,110,112,113,114,115,116,117,118,128,132,133,141,150,153,154,155,156,160,161,162,163,164,165,166,167,168,],[27,27,-1,-3,-4,-5,-6,-7,-8,-9,-12,-2,-10,-11,27,-63,-24,-26,-28,-30,-32,27,-35,27,-13,27,-25,-27,-29,-31,-33,27,27,-51,27,27,-50,-47,-53,27,27,27,27,-23,27,27,27,27,-22,-48,]),'LPAREN':([0,1,2,3,4,5,6,7,8,9,12,13,14,15,16,22,24,25,32,33,34,35,36,37,39,42,50,53,54,55,64,65,66,67,68,69,70,71,72,73,76,92,93,100,104,110,112,113,114,115,116,117,118,120,122,124,125,126,127,128,132,133,141,150,153,154,155,156,160,161,162,163,164,165,166,167,168,],[14,14,-1,-3,-4,-5,-6,-7,-8,-9,-12,37,14,41,43,49,51,52,-2,-10,-11,14,14,14,60,14,14,14,14,-63,-24,14,-26,14,-28,14,-30,14,-32,14,14,-35,14,14,14,-13,14,-25,-27,-29,-31,-33,14,134,14,14,14,14,14,14,-51,14,14,-50,-47,-53,14,14,14,14,-23,14,14,14,14,-22,-48,]),'NUMBER':([0,1,2,3,4,5,6,7,8,9,12,14,32,33,34,35,36,37,42,50,53,54,55,64,65,66,67,68,69,70,71,72,73,76,92,93,100,104,110,112,113,114,115,116,117,118,122,124,125,126,127,128,131,132,133,141,150,153,154,155,156,160,161,162,163,164,165,166,167,168,],[29,29,-1,-3,-4,-5,-6,-7,-8,-9,-12,29,-2,-10,-11,29,29,29,29,29,29,29,-63,-24,29,-26,29,-28,29,-30,29,-32,29,29,-35,29,29,29,-13,29,-25,-27,-29,-31,-33,29,29,29,29,29,29,29,147,-51,29,29,-50,-47,-53,29,29,29,29,-23,29,29,29,29,-22,-48,]),'STRING_LITERAL':([0,1,2,3,4,5,6,7,8,9,12,14,32,33,34,35,36,37,42,50,53,54,55,64,65,66,67,68,69,70,71,72,73,76,92,93,100,104,110,112,113,114,115,116,117,118,122,124,125,126,127,128,131,132,133,141,150,153,154,155,156,160,161,162,163,164,165,166,167,168,],[30,30,-1,-3,-4,-5,-6,-7,-8,-9,-12,30,-2,-10,-11,30,30,30,30,30,30,30,-63,-24,30,-26,30,-28,30,-30,30,-32,30,30,-35,30,30,30,-13,30,-25,-27,-29,-31,-33,30,30,30,30,30,30,30,148,-51,30,30,-50,-47,-53,30,30,30,30,-23,30,30,30,30,-22,-48,]),'CHAR_LITERAL':([0,1,2,3,4,5,6,7,8,9,12,14,32,33,34,35,36,37,42,50,53,54,55,64,65,66,67,68,69,70,71,72,73,76,92,93,100,104,110,112,113,114,115,116,117,118,122,124,125,126,127,128,131,132,133,141,150,153,154,155,156,160,161,162,163,164,165,166,167,168,],[31,31,-1,-3,-4,-5,-6,-7,-8,-9,-12,31,-2,-10,-11,31,31,31,31,31,31,31,-63,-24,31,-26,31,-28,31,-30,31,-32,31,31,-35,31,31,31,-13,31,-25,-27,-29,-31,-33,31,31,31,31,31,31,31,149,-51,31,31,-50,-47,-53,31,31,31,31,-23,31,31,31,31,-22,-48,]),'$end':([1,2,3,4,5,6,7,8,9,12,32,33,34,55,64,66,68,70,72,92,110,113,114,115,116,117,132,150,153,154,162,167,168,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-12,-2,-10,-11,-63,-24,-26,-28,-30,-32,-35,-13,-25,-27,-29,-31,-33,-51,-50,-47,-53,-23,-22,-48,]),'RBRACE':([2,3,4,5,6,7,8,9,12,32,33,34,55,64,66,68,70,72,76,92,110,112,113,114,115,116,117,129,130,132,133,141,142,144,145,150,153,154,160,161,162,165,166,167,168,],[-1,-3,-4,-5,-6,-7,-8,-9,-12,-2,-10,-11,-63,-24,-26,-28,-30,-32,101,-35,-13,132,-25,-27,-29,-31,-33,-54,-55,-51,150,153,154,-59,-56,-50,-47,-53,-58,-57,-23,167,168,-22,-48,]),'SON':([2,3,4,5,6,7,8,9,12,32,33,34,55,64,66,68,70,72,92,110,111,113,114,115,116,117,130,132,150,153,154,161,162,167,168,],[-1,-3,-4,-5,-6,-7,-8,-9,-12,-2,-10,-11,-63,-24,-26,-28,-30,-32,-35,-13,131,-25,-27,-29,-31,-33,131,-51,-50,-47,-53,-57,-23,-22,-48,]),'RONALDINHO':([2,3,4,5,6,7,8,9,12,32,33,34,55,64,66,68,70,72,92,110,113,114,115,116,117,129,130,132,145,150,153,154,161,162,167,168,],[-1,-3,-4,-5,-6,-7,-8,-9,-12,-2,-10,-11,-63,-24,-26,-28,-30,-32,-35,-13,-25,-27,-29,-31,-33,143,-55,-51,-56,-50,-47,-53,-57,-23,-22,-48,]),'SEMICOLON':([10,11,16,26,27,28,29,30,31,39,40,44,45,46,47,48,56,57,59,62,63,77,78,79,87,88,89,90,94,95,96,97,98,119,121,123,136,137,138,139,140,157,],[33,34,-43,-38,55,-41,-42,-44,-45,-43,-46,64,66,68,70,72,-36,-37,-34,92,-52,102,-15,-14,-39,-40,110,-52,113,114,115,116,117,-49,135,-16,-17,-18,-19,-20,-21,162,]),'MESSI':([10,16,26,28,29,30,31,39,40,56,57,59,63,87,88,90,],[-46,-43,53,-41,-42,-44,-45,-43,-46,53,53,-34,-52,-39,-40,-52,]),'PEPE':([10,16,26,28,29,30,31,39,40,56,57,59,63,87,88,90,],[-46,-43,54,-41,-42,-44,-45,-43,-46,54,54,-34,-52,-39,-40,-52,]),'CRISTIANO':([10,11,16,26,28,29,30,31,38,39,40,56,57,58,59,62,63,87,88,90,94,95,96,97,98,119,123,136,137,138,139,140,],[-46,35,-43,-38,-41,-42,-44,-45,35,-43,-46,-36,-37,35,-34,35,-52,-39,-40,-52,35,35,35,35,35,35,35,35,35,35,35,35,]),'TCHOUAMENI':([10,11,16,26,28,29,30,31,38,39,40,56,57,58,59,62,63,87,88,90,94,95,96,97,98,119,123,136,137,138,139,140,],[-46,36,-43,-38,-41,-42,-44,-45,36,-43,-46,-36,-37,36,-34,36,-52,-39,-40,-52,36,36,36,36,36,36,36,36,36,36,36,36,]),'EQUALS':([16,44,45,46,47,48,81,103,105,106,107,108,],[42,65,67,69,71,73,104,122,124,125,126,127,]),'LBRACE':([23,63,91,99,109,158,159,],[50,93,111,118,128,163,164,]),'RPAREN':([26,28,29,30,31,38,39,40,43,56,57,58,59,60,61,74,86,87,88,90,119,123,151,152,],[-38,-41,-42,-44,-45,59,-43,-46,63,-36,-37,89,-34,90,91,99,109,-39,-40,-52,-49,-16,157,158,]),'RELOP':([75,],[100,]),'COLON':([143,146,147,148,149,],[155,156,-60,-61,-62,]),'ROBBEN':([153,],[159,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,50,93,118,128,155,156,163,164,],[1,76,112,133,141,160,161,165,166,]),'statement':([0,1,50,76,93,112,118,128,133,141,155,156,160,161,163,164,165,166,],[2,32,2,32,2,32,2,2,32,32,2,2,32,32,2,2,32,32,]),'declaration':([0,1,50,76,93,112,118,128,133,141,155,156,160,161,163,164,165,166,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'assignment':([0,1,50,76,93,112,118,128,133,141,155,156,160,161,163,164,165,166,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'while_loop':([0,1,50,76,93,112,118,128,133,141,155,156,160,161,163,164,165,166,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'do_while_loop':([0,1,50,76,93,112,118,128,133,141,155,156,160,161,163,164,165,166,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'for_loop':([0,1,50,76,93,112,118,128,133,141,155,156,160,161,163,164,165,166,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'if_statement':([0,1,50,76,93,112,118,128,133,141,155,156,160,161,163,164,165,166,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'method_declaration':([0,1,50,76,93,112,118,128,133,141,155,156,160,161,163,164,165,166,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'method_call':([0,1,14,35,36,37,42,50,53,54,65,67,69,71,73,76,93,100,104,112,118,122,124,125,126,127,128,133,141,155,156,160,161,163,164,165,166,],[10,10,40,40,40,40,40,10,40,40,40,40,40,40,40,10,10,40,40,10,10,40,40,40,40,40,10,10,10,10,10,10,10,10,10,10,10,]),'expression':([0,1,14,37,42,50,65,67,69,71,73,76,93,100,104,112,118,122,124,125,126,127,128,133,141,155,156,160,161,163,164,165,166,],[11,11,38,58,62,11,94,95,96,97,98,11,11,119,123,11,11,136,137,138,139,140,11,11,11,11,11,11,11,11,11,11,11,]),'break_statement':([0,1,50,76,93,112,118,128,133,141,155,156,160,161,163,164,165,166,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'term':([0,1,14,35,36,37,42,50,65,67,69,71,73,76,93,100,104,112,118,122,124,125,126,127,128,133,141,155,156,160,161,163,164,165,166,],[26,26,26,56,57,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'factor':([0,1,14,35,36,37,42,50,53,54,65,67,69,71,73,76,93,100,104,112,118,122,124,125,126,127,128,133,141,155,156,160,161,163,164,165,166,],[28,28,28,28,28,28,28,28,87,88,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'condition':([49,52,102,134,],[74,86,121,151,]),'for_init':([51,],[77,]),'assignment_no_semicolon':([51,135,],[78,152,]),'declaration_no_semicolon':([51,],[79,]),'cases':([111,130,],[129,145,]),'case':([111,130,],[130,130,]),'default_case':([129,],[142,]),'empty':([129,],[144,]),'value':([131,],[146,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement','program',1,'p_program','parser.py',17),
  ('program -> program statement','program',2,'p_program','parser.py',18),
  ('statement -> declaration','statement',1,'p_statement','parser.py',27),
  ('statement -> assignment','statement',1,'p_statement','parser.py',28),
  ('statement -> while_loop','statement',1,'p_statement','parser.py',29),
  ('statement -> do_while_loop','statement',1,'p_statement','parser.py',30),
  ('statement -> for_loop','statement',1,'p_statement','parser.py',31),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',32),
  ('statement -> method_declaration','statement',1,'p_statement','parser.py',33),
  ('statement -> method_call SEMICOLON','statement',2,'p_statement','parser.py',34),
  ('statement -> expression SEMICOLON','statement',2,'p_statement','parser.py',35),
  ('statement -> break_statement','statement',1,'p_statement','parser.py',36),
  ('statement -> COUTINHO LPAREN expression RPAREN SEMICOLON','statement',5,'p_statement','parser.py',37),
  ('for_init -> declaration_no_semicolon','for_init',1,'p_for_init','parser.py',44),
  ('for_init -> assignment_no_semicolon','for_init',1,'p_for_init','parser.py',45),
  ('assignment_no_semicolon -> IDENTIFIER EQUALS expression','assignment_no_semicolon',3,'p_assignment_no_semicolon','parser.py',49),
  ('declaration_no_semicolon -> MILITO IDENTIFIER EQUALS expression','declaration_no_semicolon',4,'p_declaration_no_semicolon','parser.py',53),
  ('declaration_no_semicolon -> ZIDANE IDENTIFIER EQUALS expression','declaration_no_semicolon',4,'p_declaration_no_semicolon','parser.py',54),
  ('declaration_no_semicolon -> SAVIOLA IDENTIFIER EQUALS expression','declaration_no_semicolon',4,'p_declaration_no_semicolon','parser.py',55),
  ('declaration_no_semicolon -> INIESTA IDENTIFIER EQUALS expression','declaration_no_semicolon',4,'p_declaration_no_semicolon','parser.py',56),
  ('declaration_no_semicolon -> VALDERRAMA IDENTIFIER EQUALS expression','declaration_no_semicolon',4,'p_declaration_no_semicolon','parser.py',57),
  ('for_loop -> RAMOS LPAREN for_init SEMICOLON condition SEMICOLON assignment_no_semicolon RPAREN LBRACE program RBRACE','for_loop',11,'p_for_loop','parser.py',65),
  ('do_while_loop -> AGUERO LBRACE program RBRACE WALKER LPAREN condition RPAREN SEMICOLON','do_while_loop',9,'p_do_while_loop','parser.py',83),
  ('declaration -> MILITO IDENTIFIER SEMICOLON','declaration',3,'p_declaration','parser.py',99),
  ('declaration -> MILITO IDENTIFIER EQUALS expression SEMICOLON','declaration',5,'p_declaration','parser.py',100),
  ('declaration -> ZIDANE IDENTIFIER SEMICOLON','declaration',3,'p_declaration','parser.py',101),
  ('declaration -> ZIDANE IDENTIFIER EQUALS expression SEMICOLON','declaration',5,'p_declaration','parser.py',102),
  ('declaration -> SAVIOLA IDENTIFIER SEMICOLON','declaration',3,'p_declaration','parser.py',103),
  ('declaration -> SAVIOLA IDENTIFIER EQUALS expression SEMICOLON','declaration',5,'p_declaration','parser.py',104),
  ('declaration -> INIESTA IDENTIFIER SEMICOLON','declaration',3,'p_declaration','parser.py',105),
  ('declaration -> INIESTA IDENTIFIER EQUALS expression SEMICOLON','declaration',5,'p_declaration','parser.py',106),
  ('declaration -> VALDERRAMA IDENTIFIER SEMICOLON','declaration',3,'p_declaration','parser.py',107),
  ('declaration -> VALDERRAMA IDENTIFIER EQUALS expression SEMICOLON','declaration',5,'p_declaration','parser.py',108),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_grouped','parser.py',116),
  ('assignment -> IDENTIFIER EQUALS expression SEMICOLON','assignment',4,'p_assignment','parser.py',125),
  ('expression -> expression CRISTIANO term','expression',3,'p_expression','parser.py',129),
  ('expression -> expression TCHOUAMENI term','expression',3,'p_expression','parser.py',130),
  ('expression -> term','expression',1,'p_expression','parser.py',131),
  ('term -> term MESSI factor','term',3,'p_term','parser.py',138),
  ('term -> term PEPE factor','term',3,'p_term','parser.py',139),
  ('term -> factor','term',1,'p_term','parser.py',140),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',147),
  ('factor -> IDENTIFIER','factor',1,'p_factor','parser.py',148),
  ('factor -> STRING_LITERAL','factor',1,'p_factor','parser.py',149),
  ('factor -> CHAR_LITERAL','factor',1,'p_factor','parser.py',150),
  ('factor -> method_call','factor',1,'p_factor','parser.py',151),
  ('if_statement -> BALLACK LPAREN condition RPAREN LBRACE program RBRACE','if_statement',7,'p_if_statement','parser.py',156),
  ('if_statement -> BALLACK LPAREN condition RPAREN LBRACE program RBRACE ROBBEN LBRACE program RBRACE','if_statement',11,'p_if_statement','parser.py',157),
  ('condition -> IDENTIFIER RELOP expression','condition',3,'p_condition','parser.py',164),
  ('while_loop -> WALKER LPAREN condition RPAREN LBRACE program RBRACE','while_loop',7,'p_while_loop','parser.py',169),
  ('method_declaration -> IDENTIFIER LPAREN RPAREN LBRACE program RBRACE','method_declaration',6,'p_method_declaration','parser.py',184),
  ('method_call -> IDENTIFIER LPAREN RPAREN','method_call',3,'p_method_call','parser.py',188),
  ('statement -> FORLAN LPAREN IDENTIFIER RPAREN LBRACE cases default_case RBRACE','statement',8,'p_switch_statement','parser.py',192),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',196),
  ('cases -> case','cases',1,'p_cases','parser.py',200),
  ('cases -> case cases','cases',2,'p_cases','parser.py',201),
  ('case -> SON value COLON program','case',4,'p_case','parser.py',209),
  ('default_case -> RONALDINHO COLON program','default_case',3,'p_default_case','parser.py',214),
  ('default_case -> empty','default_case',1,'p_default_case','parser.py',215),
  ('value -> NUMBER','value',1,'p_value','parser.py',219),
  ('value -> STRING_LITERAL','value',1,'p_value','parser.py',220),
  ('value -> CHAR_LITERAL','value',1,'p_value','parser.py',221),
  ('break_statement -> ROMAN SEMICOLON','break_statement',2,'p_break_statement','parser.py',224),
]
