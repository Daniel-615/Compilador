Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMA
    DIVIDE
    DOT
    ELSE
    GT
    IF
    LBRACE
    LPAREN
    LT
    MINUS
    QUOTE
    RBRACE
    RPAREN

Grammar

Rule 0     S' -> declaration
Rule 1     declaration -> INT IDENTIFIER SEMICOLON
Rule 2     declaration -> FLOAT IDENTIFIER SEMICOLON
Rule 3     declaration -> CHAR IDENTIFIER SEMICOLON
Rule 4     assignment -> IDENTIFIER EQUALS expression SEMICOLON
Rule 5     expression -> expression PLUS term
Rule 6     expression -> term
Rule 7     term -> term TIMES factor
Rule 8     term -> factor
Rule 9     factor -> NUMBER
Rule 10    program -> declaration
Rule 11    program -> assignment
Rule 12    program -> expression
Rule 13    program -> program declaration
Rule 14    program -> program assignment
Rule 15    program -> program expression

Terminals, with rules where they appear

CHAR                 : 3
COMMA                : 
DIVIDE               : 
DOT                  : 
ELSE                 : 
EQUALS               : 4
FLOAT                : 2
GT                   : 
IDENTIFIER           : 1 2 3 4
IF                   : 
INT                  : 1
LBRACE               : 
LPAREN               : 
LT                   : 
MINUS                : 
NUMBER               : 9
PLUS                 : 5
QUOTE                : 
RBRACE               : 
RPAREN               : 
SEMICOLON            : 1 2 3 4
TIMES                : 7
error                : 

Nonterminals, with rules where they appear

assignment           : 11 14
declaration          : 10 13 0
expression           : 4 5 12 15
factor               : 7 8
program              : 13 14 15
term                 : 5 6 7

Parsing method: LALR

state 0

    (0) S' -> . declaration
    (1) declaration -> . INT IDENTIFIER SEMICOLON
    (2) declaration -> . FLOAT IDENTIFIER SEMICOLON
    (3) declaration -> . CHAR IDENTIFIER SEMICOLON

    INT             shift and go to state 2
    FLOAT           shift and go to state 3
    CHAR            shift and go to state 4

    declaration                    shift and go to state 1

state 1

    (0) S' -> declaration .



state 2

    (1) declaration -> INT . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 5


state 3

    (2) declaration -> FLOAT . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 6


state 4

    (3) declaration -> CHAR . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 7


state 5

    (1) declaration -> INT IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 8


state 6

    (2) declaration -> FLOAT IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 9


state 7

    (3) declaration -> CHAR IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 10


state 8

    (1) declaration -> INT IDENTIFIER SEMICOLON .

    $end            reduce using rule 1 (declaration -> INT IDENTIFIER SEMICOLON .)


state 9

    (2) declaration -> FLOAT IDENTIFIER SEMICOLON .

    $end            reduce using rule 2 (declaration -> FLOAT IDENTIFIER SEMICOLON .)


state 10

    (3) declaration -> CHAR IDENTIFIER SEMICOLON .

    $end            reduce using rule 3 (declaration -> CHAR IDENTIFIER SEMICOLON .)

